
import React, { useState, useEffect, useRef } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { 
  Plus, 
  Trash2, 
  Edit3, 
  Check, 
  X, 
  RefreshCw, 
  Sparkles, 
  ShoppingCart,
  Calendar,
  Clock,
  MapPin,
  DollarSign,
  Zap
} from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';

interface ShoppingItem {
  id: number;
  name: string;
  quantity: number;
  unit: string;
  category: string;
  priority: 'low' | 'medium' | 'high';
  completed: boolean;
  estimated_price?: number;
  notes?: string;
  created_at: string;
  updated_at: string;
}

interface ShoppingList {
  id: number;
  title: string;
  items: ShoppingItem[];
  created_at: string;
  updated_at: string;
  total_items: number;
  completed_items: number;
}

const CATEGORIES = [
  'Produce', 'Dairy', 'Meat', 'Bakery', 'Pantry', 'Frozen', 
  'Beverages', 'Snacks', 'Health & Beauty', 'Household', 'Other'
];

const UNITS = [
  'pieces', 'lbs', 'oz', 'kg', 'g', 'liters', 'ml', 'cups', 
  'tbsp', 'tsp', 'dozen', 'pack', 'bottle', 'bag', 'box', 'can'
];

const PRIORITY_COLORS = {
  low: 'bg-gray-100 text-gray-800',
  medium: 'bg-yellow-100 text-yellow-800',
  high: 'bg-red-100 text-red-800'
};

export default function ShoppingList() {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const [isGeneratingList, setIsGeneratingList] = useState(false);
  const [generationProgress, setGenerationProgress] = useState(0);
  const [generationText, setGenerationText] = useState('');
  const [editingItem, setEditingItem] = useState<number | null>(null);
  const [newItem, setNewItem] = useState({
    name: '',
    quantity: 1,
    unit: 'pieces',
    category: 'Other',
    priority: 'medium' as const,
    notes: ''
  });
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [sessionStartTime] = useState(Date.now());
  const hasAutoGenerated = useRef(false);

  // Fetch shopping list
  const { data: shoppingList, isLoading, error } = useQuery<ShoppingList>({
    queryKey: ['shopping-list'],
    queryFn: async () => {
      const response = await fetch('/api/shopping-list');
      if (!response.ok) {
        throw new Error('Failed to fetch shopping list');
      }
      return response.json();
    }
  });

  // Auto-generation logic
  useEffect(() => {
    if (!shoppingList || hasAutoGenerated.current) return;

    const hasItems = shoppingList.items.length > 0;
    const isNewSession = Date.now() - sessionStartTime < 5000; // Within 5 seconds of component mount
    const shouldAutoGenerate = !hasItems && isNewSession;

    console.log('Animation trigger check:', {
      hasItems,
      isNewSession,
      shouldAutoGenerate,
      userHasClearedList: false,
      isGeneratingList
    });

    if (shouldAutoGenerate && !isGeneratingList) {
      hasAutoGenerated.current = true;
      handleGenerateList();
    } else if (hasItems) {
      console.log('Existing session with items, no auto-regeneration needed');
    }
  }, [shoppingList, sessionStartTime, isGeneratingList]);

  // Generate list mutation
  const generateListMutation = useMutation({
    mutationFn: async () => {
      const response = await fetch('/api/shopping-list/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      if (!response.ok) {
        throw new Error('Failed to generate shopping list');
      }
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['shopping-list'] });
      setIsGeneratingList(false);
      setGenerationProgress(0);
    },
    onError: () => {
      setIsGeneratingList(false);
      setGenerationProgress(0);
    }
  });

  // Add item mutation
  const addItemMutation = useMutation({
    mutationFn: async (item: Omit<ShoppingItem, 'id' | 'completed' | 'created_at' | 'updated_at'>) => {
      const response = await fetch('/api/shopping-list/items', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(item)
      });
      if (!response.ok) throw new Error('Failed to add item');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['shopping-list'] });
      setNewItem({
        name: '',
        quantity: 1,
        unit: 'pieces',
        category: 'Other',
        priority: 'medium',
        notes: ''
      });
      setIsAddDialogOpen(false);
    }
  });

  // Update item mutation
  const updateItemMutation = useMutation({
    mutationFn: async ({ id, updates }: { id: number; updates: Partial<ShoppingItem> }) => {
      const response = await fetch(`/api/shopping-list/items/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      });
      if (!response.ok) throw new Error('Failed to update item');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['shopping-list'] });
      setEditingItem(null);
    }
  });

  // Delete item mutation
  const deleteItemMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await fetch(`/api/shopping-list/items/${id}`, {
        method: 'DELETE'
      });
      if (!response.ok) throw new Error('Failed to delete item');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['shopping-list'] });
    }
  });

  const handleGenerateList = async () => {
    setIsGeneratingList(true);
    setGenerationProgress(0);
    
    const messages = [
      'Analyzing your shopping patterns...',
      'Checking your pantry inventory...',
      'Finding the best deals...',
      'Optimizing your shopping route...',
      'Finalizing your personalized list...'
    ];

    let messageIndex = 0;
    setGenerationText(messages[0]);

    const interval = setInterval(() => {
      setGenerationProgress(prev => {
        const newProgress = prev + 20;
        if (newProgress < 100) {
          messageIndex = Math.floor(newProgress / 20);
          setGenerationText(messages[messageIndex] || messages[messages.length - 1]);
        }
        return newProgress;
      });
    }, 800);

    try {
      await generateListMutation.mutateAsync();
      clearInterval(interval);
      setGenerationProgress(100);
      setGenerationText('Shopping list generated successfully!');
      setTimeout(() => {
        setIsGeneratingList(false);
        setGenerationProgress(0);
      }, 1000);
    } catch (error) {
      clearInterval(interval);
      setIsGeneratingList(false);
      setGenerationProgress(0);
    }
  };

  const handleToggleComplete = (itemId: number, completed: boolean) => {
    updateItemMutation.mutate({ id: itemId, updates: { completed } });
  };

  const handleDeleteItem = (itemId: number) => {
    deleteItemMutation.mutate(itemId);
  };

  const handleAddItem = () => {
    if (!newItem.name.trim()) return;
    addItemMutation.mutate(newItem);
  };

  const getCategoryIcon = (category: string) => {
    const icons: Record<string, React.ReactNode> = {
      'Produce': 'ü•¨',
      'Dairy': 'ü•õ',
      'Meat': 'ü•©',
      'Bakery': 'üçû',
      'Pantry': 'ü•´',
      'Frozen': 'üßä',
      'Beverages': 'ü•§',
      'Snacks': 'üç™',
      'Health & Beauty': 'üß¥',
      'Household': 'üßΩ',
      'Other': 'üì¶'
    };
    return icons[category] || 'üì¶';
  };

  if (isLoading) {
    return (
      <div className="container mx-auto p-4 max-w-4xl">
        <div className="flex items-center justify-center h-64">
          <RefreshCw className="h-8 w-8 animate-spin text-blue-500" />
          <span className="ml-2 text-lg">Loading your shopping list...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto p-4 max-w-4xl">
        <Alert>
          <AlertDescription>
            Failed to load shopping list. Please try refreshing the page.
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4 max-w-4xl space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Shopping List</h1>
          <p className="text-gray-600 mt-1">
            {shoppingList?.items.length || 0} items ‚Ä¢ {shoppingList?.completed_items || 0} completed
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            onClick={handleGenerateList}
            disabled={isGeneratingList}
            variant="outline"
            className="flex items-center gap-2"
          >
            {isGeneratingList ? (
              <RefreshCw className="h-4 w-4 animate-spin" />
            ) : (
              <Sparkles className="h-4 w-4" />
            )}
            Generate Smart List
          </Button>
          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
            <DialogTrigger asChild>
              <Button className="flex items-center gap-2">
                <Plus className="h-4 w-4" />
                Add Item
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Add New Item</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <Input
                  placeholder="Item name"
                  value={newItem.name}
                  onChange={(e) => setNewItem(prev => ({ ...prev, name: e.target.value }))}
                />
                <div className="grid grid-cols-2 gap-2">
                  <Input
                    type="number"
                    min="1"
                    placeholder="Quantity"
                    value={newItem.quantity}
                    onChange={(e) => setNewItem(prev => ({ ...prev, quantity: parseInt(e.target.value) || 1 }))}
                  />
                  <Select value={newItem.unit} onValueChange={(value) => setNewItem(prev => ({ ...prev, unit: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {UNITS.map(unit => (
                        <SelectItem key={unit} value={unit}>{unit}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <Select value={newItem.category} onValueChange={(value) => setNewItem(prev => ({ ...prev, category: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {CATEGORIES.map(category => (
                        <SelectItem key={category} value={category}>{category}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <Select value={newItem.priority} onValueChange={(value: 'low' | 'medium' | 'high') => setNewItem(prev => ({ ...prev, priority: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Low Priority</SelectItem>
                      <SelectItem value="medium">Medium Priority</SelectItem>
                      <SelectItem value="high">High Priority</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <Textarea
                  placeholder="Notes (optional)"
                  value={newItem.notes}
                  onChange={(e) => setNewItem(prev => ({ ...prev, notes: e.target.value }))}
                  rows={2}
                />
                <div className="flex gap-2 justify-end">
                  <Button variant="outline" onClick={() => setIsAddDialogOpen(false)}>
                    Cancel
                  </Button>
                  <Button onClick={handleAddItem} disabled={!newItem.name.trim()}>
                    Add Item
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Generation Animation */}
      {isGeneratingList && (
        <Card className="border-blue-200 bg-blue-50">
          <CardContent className="p-6">
            <div className="flex items-center gap-3 mb-4">
              <div className="relative">
                <Sparkles className="h-6 w-6 text-blue-500 animate-pulse" />
                <div className="absolute inset-0 animate-ping">
                  <Sparkles className="h-6 w-6 text-blue-300" />
                </div>
              </div>
              <div>
                <h3 className="font-semibold text-blue-900">Generating Your Smart Shopping List</h3>
                <p className="text-blue-700 text-sm">{generationText}</p>
              </div>
            </div>
            <Progress value={generationProgress} className="w-full" />
          </CardContent>
        </Card>
      )}

      {/* Shopping List */}
      {shoppingList && shoppingList.items.length > 0 ? (
        <div className="space-y-4">
          {/* Progress Summary */}
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <ShoppingCart className="h-5 w-5 text-blue-500" />
                  <span className="font-medium">
                    {shoppingList.completed_items} of {shoppingList.total_items} items completed
                  </span>
                </div>
                <div className="text-sm text-gray-500">
                  {Math.round((shoppingList.completed_items / shoppingList.total_items) * 100)}% done
                </div>
              </div>
              <Progress 
                value={(shoppingList.completed_items / shoppingList.total_items) * 100} 
                className="mt-2" 
              />
            </CardContent>
          </Card>

          {/* Items by Category */}
          {CATEGORIES.map(category => {
            const categoryItems = shoppingList.items.filter(item => item.category === category);
            if (categoryItems.length === 0) return null;

            return (
              <Card key={category}>
                <CardHeader className="pb-3">
                  <CardTitle className="flex items-center gap-2 text-lg">
                    <span className="text-xl">{getCategoryIcon(category)}</span>
                    {category}
                    <Badge variant="secondary" className="ml-auto">
                      {categoryItems.length}
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="space-y-2">
                    {categoryItems.map((item) => (
                      <div
                        key={item.id}
                        className={`flex items-center gap-3 p-3 rounded-lg border transition-all ${
                          item.completed 
                            ? 'bg-gray-50 border-gray-200 opacity-75' 
                            : 'bg-white border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <Checkbox
                          checked={item.completed}
                          onCheckedChange={(checked) => handleToggleComplete(item.id, !!checked)}
                          className="flex-shrink-0"
                        />
                        
                        <div className="flex-1 min-w-0">
                          <div className={`font-medium ${item.completed ? 'line-through text-gray-500' : ''}`}>
                            {item.name}
                          </div>
                          <div className="flex items-center gap-2 text-sm text-gray-500 mt-1">
                            <span>{item.quantity} {item.unit}</span>
                            <Separator orientation="vertical" className="h-3" />
                            <Badge className={PRIORITY_COLORS[item.priority]} variant="secondary">
                              {item.priority}
                            </Badge>
                            {item.estimated_price && (
                              <>
                                <Separator orientation="vertical" className="h-3" />
                                <span className="flex items-center gap-1">
                                  <DollarSign className="h-3 w-3" />
                                  {item.estimated_price.toFixed(2)}
                                </span>
                              </>
                            )}
                          </div>
                          {item.notes && (
                            <p className="text-sm text-gray-600 mt-1">{item.notes}</p>
                          )}
                        </div>

                        <div className="flex items-center gap-1 flex-shrink-0">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setEditingItem(item.id)}
                            className="h-8 w-8 p-0"
                          >
                            <Edit3 className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDeleteItem(item.id)}
                            className="h-8 w-8 p-0 text-red-500 hover:text-red-700"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      ) : (
        !isGeneratingList && (
          <Card className="text-center py-12">
            <CardContent>
              <ShoppingCart className="h-16 w-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-900 mb-2">Your shopping list is empty</h3>
              <p className="text-gray-600 mb-6">
                Add items manually or let our AI generate a personalized shopping list for you.
              </p>
              <div className="flex gap-3 justify-center">
                <Button onClick={handleGenerateList} className="flex items-center gap-2">
                  <Sparkles className="h-4 w-4" />
                  Generate Smart List
                </Button>
                <Button variant="outline" onClick={() => setIsAddDialogOpen(true)}>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Item
                </Button>
              </div>
            </CardContent>
          </Card>
        )
      )}
    </div>
  );
}
